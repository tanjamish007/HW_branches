{
	"info": {
		"_postman_id": "5118251f-3b0a-497a-b99b-b9d7556e7567",
		"name": "HW2_Postman_Mishkova",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ER_1_get_method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"})\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_2_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"var resp_JSON = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Name_s_request\", function () {\r",
							"    pm.expect(resp_JSON.name).to.eql(\"Antonina\");\r",
							"console.log (\"Name = \" + resp_JSON.name);\r",
							"})\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Age_s_request\", function () {\r",
							"    pm.expect(resp_JSON.age).to.eql(\"49\");\r",
							"console.log (\"Age = \" + resp_JSON.age);\r",
							"})\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Salary_s_request\", function () {\r",
							"    pm.expect(resp_JSON.salary).to.eql(1800);\r",
							"console.log(\"Salary = \" + resp_JSON.salary);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"\r",
							"var req_parse = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Test_name_eql_name_s_request\"), function() {\r",
							"    pm.expect(resp_JSON.name).to.eql(req_parse.name);\r",
							"console.log(\"Name = \" + req_parse.name);\r",
							"}\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Test_age_eql_age_s_request\"), function() {\r",
							"    pm.expect(resp_JSON.age).to.eql(req_parse.age);\r",
							"console.log(\"Age = \" + req_parse.age);\r",
							"}\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Test_salary_eql_salary_s_request\"), function() {\r",
							"    pm.expect(resp_JSON.salary).to.eql(req_parse.salary);\r",
							"console.log(\"Salary = \" + req_parse.salary);\r",
							"}\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp_JSON.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Test salary_1_5_year = request salary*4\"), function() {\r",
							"    pm.expect(resp_JSON.u_salary_1_5_year).to.eql(4*req_parse.salary);\r",
							"console.log(\"Salary after 1.5year = \" + 4*req_parse.salary);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Antonina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "49",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_5_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var resp_JSON = pm.response.json();\r",
							"console.log(resp_JSON);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var req_parse = pm.request.url.query.toObject();\r",
							"console.log(req_parse);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test('Name response = name request', function() {\r",
							"    pm.expect(resp_JSON.name).to.eql(req_parse.name);\r",
							"    console.log(resp_JSON.name + ' = '+ req_parse.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test('Age response = age request', function(){\r",
							"    pm.expect(resp_JSON.age).to.eql(req_parse.age);\r",
							"    console.log(resp_JSON.age + ' = '+ req_parse.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test('Salary response = salary request', function(){\r",
							"    pm.expect(resp_JSON.salary).to.eql(+req_parse.salary);\r",
							"    console.log(resp_JSON.salary + ' = '+ req_parse.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp_JSON.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test('Dog have a name', function(){\r",
							"    pm.expect(resp_JSON.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test('Dog have an age', function(){\r",
							"    pm.expect(resp_JSON.family.pets.dog).to.have.property('age');\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test('Dog name is Luky', function(){\r",
							"    pm.expect(resp_JSON.family.pets.dog.name).to.have.eql('Luky');\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test('Dog is 4 years old', function(){\r",
							"    pm.expect(resp_JSON.family.pets.dog.age).to.have.eql(4);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Semyon&age=58&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Semyon"
						},
						{
							"key": "age",
							"value": "58"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_6_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"var resp_JSON = pm.response.json();\r",
							"console.log(resp_JSON);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var req_parse = pm.request.url.query.toObject();\r",
							"console.log(req_parse);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test('Name response = name request', function(){\r",
							"    pm.expect(resp_JSON.name).to.eql(req_parse.name);\r",
							"    console.log(resp_JSON.name + ' = '+ req_parse.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test('Age response = age request', function(){\r",
							"    pm.expect(resp_JSON.age).to.eql(+req_parse.age);\r",
							"    console.log(resp_JSON.age + ' = '+ req_parse.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(resp_JSON.salary[0]);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(resp_JSON.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(resp_JSON.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp_JSON.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp_JSON.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Salary [0] = salary request', function(){\r",
							"    pm.expect(resp_JSON.salary[0]).to.eql(+req_parse.salary);\r",
							"    console.log('Salary[0] is ' + resp_JSON.salary[0] + ' = ' + +req_parse.salary + ' from request');\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Salary [1] = salary*2 request', function(){\r",
							"    pm.expect(+resp_JSON.salary[1]).to.eql(2*req_parse.salary);\r",
							"    console.log('Salary[1] is ' + resp_JSON.salary[1] + ' = ' + 2*req_parse.salary + ' from request');\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Salary [2] = salary*3 request', function(){\r",
							"    pm.expect(+resp_JSON.salary[2]).to.eql(3*req_parse.salary);\r",
							"    console.log('Salary[2] is ' + resp_JSON.salary[2] + ' = ' + 3*req_parse.salary + ' from request');\r",
							"})\r",
							"\r",
							"//15. Создать в окружении переменную name \r",
							"\r",
							"var resp_name = resp_JSON.name;\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"\r",
							"var resp_age = resp_JSON.age;\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"\r",
							"var resp_salary = resp_JSON.salary;\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", resp_name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", resp_age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", resp_salary[0]);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"var count = 1;\r",
							"for(var i of resp_JSON.salary) {\r",
							"\tconsole.log('salary', count, i)\r",
							"\tcount++\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Klementina&age=32&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Klementina"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ER_7_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"\r",
							"var resp_JSON = pm.response.json();\r",
							"console.log(resp_JSON);\r",
							"\r",
							"//7. Спарсить request.\r",
							"\r",
							"var req_parse = request.data;\r",
							"console.log(req_parse);\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test('Response have start_qa_salary', function() {\r",
							"    pm.expect(Object.keys(resp_JSON)).to.include('start_qa_salary');\r",
							"    console.log(Object.keys(resp_JSON)[5]);\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test('Response have qa_salary_after_6_months', function() {\r",
							"    pm.expect(Object.keys(resp_JSON)).to.include('qa_salary_after_6_months');\r",
							"    console.log(Object.keys(resp_JSON)[4]);\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test('Response have qa_salary_after_12_months', function(){\r",
							"    pm.expect(Object.keys(resp_JSON)).to.include('qa_salary_after_12_months')\r",
							"    console.log(Object.keys(resp_JSON)[2]);\r",
							"})\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test('Response have qa_salary_after_1.5_year', function(){\r",
							"    pm.expect(Object.keys(resp_JSON)).to.include('qa_salary_after_1.5_year');\r",
							"    console.log(Object.keys(resp_JSON)[1]);\r",
							"})\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test('Response have qa_salary_after_3.5_year', function(){\r",
							"    pm.expect(Object.keys(resp_JSON)).to.include('qa_salary_after_3.5_years');\r",
							"    console.log(Object.keys(resp_JSON)[3]);\r",
							"})\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test('Response have person', function(){\r",
							"    pm.expect(Object.keys(resp_JSON)).to.include('person');\r",
							"    console.log(Object.keys(resp_JSON)[0]);\r",
							"})\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Response start_qa_salary = request salary', function(){\r",
							"    pm.expect(resp_JSON.start_qa_salary).to.eql(+req_parse.salary);\r",
							"    console.log(resp_JSON.start_qa_salary + ' = '+ req_parse.salary);\r",
							"})\r",
							"\r",
							" //15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Response qa_salary_after_6_months = request salary*2', function(){\r",
							"    pm.expect(resp_JSON.qa_salary_after_6_months).to.eql(2*req_parse.salary);\r",
							"    console.log(resp_JSON.qa_salary_after_6_months + ' = '+ 2*req_parse.salary);\r",
							"})\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Response qa_salary_after_12_months = request salary*2,7', function(){\r",
							"    pm.expect(resp_JSON.qa_salary_after_12_months).to.eql(2.7*req_parse.salary);\r",
							"    console.log(resp_JSON.qa_salary_after_12_months + ' = '+ 2.7*req_parse.salary);\r",
							"})\r",
							"\r",
							" //17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('Response qa_salary_after_1.5_year = request salary*3.3', function(){\r",
							"    pm.expect(resp_JSON['qa_salary_after_1.5_year']).to.eql(3.3*req_parse.salary);\r",
							"    console.log(resp_JSON['qa_salary_after_1.5_year'] + ' = '+ 3.3*req_parse.salary);\r",
							"})\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Response qa_salary_after_3.5_years = request salary*3.8', function(){\r",
							"    pm.expect(resp_JSON['qa_salary_after_3.5_years']).to.eql(3.8*req_parse.salary);\r",
							"    console.log(resp_JSON['qa_salary_after_3.5_years'] + ' = '+ 3.8*req_parse.salary);\r",
							"})\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Person u_name[1] = request salary', function() {\r",
							"\tpm.expect(resp_JSON.person.u_name[1]).to.eql(+req_parse.salary);\r",
							"    console.log(resp_JSON.person.u_name[1] + ' = '+ req_parse.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test('Person u_age = request age', function() {\r",
							"    pm.expect(resp_JSON.person.u_age).to.eql(+req_parse.age);\r",
							"    console.log(resp_JSON.person.u_age + ' = '+ req_parse.age);\r",
							"})\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('Person u_salary_5_years = request salary*4.2', function() {\r",
							"    pm.expect(resp_JSON.person.u_salary_5_years).to.eql(4.2*req_parse.salary);\r",
							"    console.log(resp_JSON.person.u_salary_5_years + ' = '+ 4.2*req_parse.salary);\r",
							"})\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"var pers_resp = resp_JSON.person\r",
							"\r",
							"for (i in pers_resp) {\r",
							"\tconsole.log(i + ' = ' + pers_resp[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}